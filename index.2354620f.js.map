{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.initialState = initialState;\n        this.currentState = initialState.map((el)=>[\n                ...el\n            ]);\n        this.tbody = document.querySelector(\"tbody\");\n        this.score = 0;\n    }\n    nextMovePossible() {\n        return this.currentState.some((row, rowIndex)=>{\n            return row.some((cell, cellIndex)=>{\n                let upperCell, lowerCell;\n                const rightCell = row[cellIndex + 1];\n                const leftCell = row[cellIndex - 1];\n                if (rowIndex < 3) lowerCell = this.currentState[rowIndex + 1][cellIndex];\n                if (rowIndex > 0) upperCell = this.currentState[rowIndex - 1][cellIndex];\n                const zeroValue = [\n                    lowerCell,\n                    upperCell,\n                    leftCell,\n                    rightCell\n                ].some((el)=>el === 0);\n                const sameValue = [\n                    lowerCell,\n                    upperCell,\n                    leftCell,\n                    rightCell\n                ].some((el)=>el === cell);\n                const possibleForCell = zeroValue || sameValue;\n                return possibleForCell;\n            });\n        });\n    }\n    renderHTML() {\n        this.currentState.forEach((row, rowIndex)=>{\n            const tr = this.tbody.children[rowIndex];\n            const cells = [\n                ...tr.children\n            ];\n            cells.forEach((cell, cellIndex)=>{\n                if (row[cellIndex] === 0) this.clearCell(cell);\n                else {\n                    cell.textContent = row[cellIndex];\n                    cell.className = \"field-cell\";\n                    cell.classList.add(`field-cell--${row[cellIndex]}`);\n                }\n            });\n        });\n    }\n    createNewCell() {\n        const fullField = this.currentState.every((row)=>{\n            return row.every((cell)=>cell !== 0);\n        });\n        if (fullField) return;\n        let rowIndex, cellIndex;\n        do {\n            rowIndex = Math.floor(Math.random() * 4);\n            cellIndex = Math.floor(Math.random() * 4);\n        }while (this.currentState[rowIndex][cellIndex] !== 0);\n        this.currentState[rowIndex][cellIndex] = 2;\n    }\n    clearCell(cell) {\n        cell.className = \"field-cell\";\n        cell.textContent = \"\";\n    }\n    move(direction) {\n        const isVertical = direction === \"up\" || direction === \"down\";\n        const step = direction === \"left\" || direction === \"up\" ? -1 : 1;\n        const start = step === 1 ? 3 : 0;\n        const end = (i)=>step === 1 ? i >= 0 : i < 4;\n        let moveDone = false;\n        for(let rowIndex = start; end(rowIndex); rowIndex -= step)for(let cellIndex = start; end(cellIndex); cellIndex -= step){\n            let n = 0;\n            let row = rowIndex;\n            let col = cellIndex;\n            let nextRow = isVertical ? rowIndex + (n + 1) * step : rowIndex;\n            let nextCol = isVertical ? cellIndex : cellIndex + (n + 1) * step;\n            let currentCell = this.currentState[row][col];\n            let nextCell;\n            if (currentCell === 0) continue;\n            if (nextRow >= 0 && nextRow < 4) nextCell = this.currentState[nextRow][nextCol];\n            while(nextCell === 0 || nextCell === currentCell){\n                moveDone = true;\n                if (nextCell === 0) {\n                    this.currentState[nextRow][nextCol] = currentCell;\n                    this.currentState[row][col] = 0;\n                    n++;\n                    row = isVertical ? rowIndex + n * step : rowIndex;\n                    col = isVertical ? cellIndex : cellIndex + n * step;\n                    nextRow = isVertical ? rowIndex + (n + 1) * step : rowIndex;\n                    nextCol = isVertical ? cellIndex : cellIndex + (n + 1) * step;\n                    if (nextRow >= 0 && nextRow < 4 && nextCol >= 0 && nextCol < 4) {\n                        currentCell = this.currentState[row][col];\n                        nextCell = this.currentState[nextRow][nextCol];\n                    } else break;\n                } else {\n                    this.currentState[nextRow][nextCol] = currentCell * 2;\n                    this.currentState[row][col] = 0;\n                    this.score += currentCell * 2;\n                    this.getScore();\n                    break;\n                }\n            }\n        }\n        if (moveDone) {\n            this.createNewCell();\n            this.renderHTML();\n            this.getStatus();\n        }\n    }\n    moveLeft() {\n        this.move(\"left\");\n    }\n    moveRight() {\n        this.move(\"right\");\n    }\n    moveUp() {\n        this.move(\"up\");\n    }\n    moveDown() {\n        this.move(\"down\");\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        const scoreField = document.querySelector(\".game-score\");\n        scoreField.textContent = this.score;\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.currentState;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        const emptyField = this.currentState.every((row)=>{\n            return row.every((cell)=>cell === 0);\n        });\n        if (emptyField) return \"idle\";\n        const is2048 = this.currentState.some((row)=>{\n            return row.some((cell)=>cell === 2048);\n        });\n        if (is2048) {\n            document.querySelector(\".message-win\").classList.remove(\"hidden\");\n            return \"win\";\n        }\n        if (!this.nextMovePossible()) {\n            document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n            return \"lose\";\n        }\n        return \"playing\";\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.createNewCell();\n        this.createNewCell();\n        this.renderHTML();\n        document.querySelector(\".message-start\").classList.add(\"hidden\");\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        document.querySelector(\".message-win\").classList.add(\"hidden\");\n        document.querySelector(\".message-lose\").classList.add(\"hidden\");\n        this.currentState = this.initialState.map((el)=>[\n                ...el\n            ]);\n        this.score = 0;\n        this.getScore();\n        this.createNewCell();\n        this.createNewCell();\n        this.renderHTML();\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$initialState = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports($09e991522ca7e64e$var$initialState);\nconst $09e991522ca7e64e$var$button = document.querySelector(\"button\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", $09e991522ca7e64e$var$buttonFunction);\nfunction $09e991522ca7e64e$var$buttonFunction() {\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n    } else $09e991522ca7e64e$var$game.restart();\n}\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$keyDown);\nfunction $09e991522ca7e64e$var$keyDown(e) {\n    const key = e.key;\n    switch(key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n    }\n}\n\n\n//# sourceMappingURL=index.2354620f.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst initialState = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nconst game = new Game(initialState);\n\nconst button = document.querySelector('button');\n\nbutton.addEventListener('click', buttonFunction);\n\nfunction buttonFunction() {\n  if (button.classList.contains('start')) {\n    game.start();\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  } else {\n    game.restart();\n  }\n}\n\ndocument.addEventListener('keydown', keyDown);\n\nfunction keyDown(e) {\n  const key = e.key;\n\n  switch (key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n  }\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.initialState = initialState;\n    this.currentState = initialState.map((el) => [...el]);\n    this.tbody = document.querySelector('tbody');\n    this.score = 0;\n  }\n\n  nextMovePossible() {\n    return this.currentState.some((row, rowIndex) => {\n      return row.some((cell, cellIndex) => {\n        let upperCell, lowerCell;\n        const rightCell = row[cellIndex + 1];\n        const leftCell = row[cellIndex - 1];\n\n        if (rowIndex < 3) {\n          lowerCell = this.currentState[rowIndex + 1][cellIndex];\n        }\n\n        if (rowIndex > 0) {\n          upperCell = this.currentState[rowIndex - 1][cellIndex];\n        }\n\n        const zeroValue = [lowerCell, upperCell, leftCell, rightCell].some(\n          (el) => el === 0,\n        );\n        const sameValue = [lowerCell, upperCell, leftCell, rightCell].some(\n          (el) => el === cell,\n        );\n        const possibleForCell = zeroValue || sameValue;\n\n        return possibleForCell;\n      });\n    });\n  }\n\n  renderHTML() {\n    this.currentState.forEach((row, rowIndex) => {\n      const tr = this.tbody.children[rowIndex];\n      const cells = [...tr.children];\n\n      cells.forEach((cell, cellIndex) => {\n        if (row[cellIndex] === 0) {\n          this.clearCell(cell);\n        } else {\n          cell.textContent = row[cellIndex];\n          cell.className = 'field-cell';\n          cell.classList.add(`field-cell--${row[cellIndex]}`);\n        }\n      });\n    });\n  }\n\n  createNewCell() {\n    const fullField = this.currentState.every((row) => {\n      return row.every((cell) => cell !== 0);\n    });\n\n    if (fullField) {\n      return;\n    }\n\n    let rowIndex, cellIndex;\n\n    do {\n      rowIndex = Math.floor(Math.random() * 4);\n      cellIndex = Math.floor(Math.random() * 4);\n    } while (this.currentState[rowIndex][cellIndex] !== 0);\n\n    this.currentState[rowIndex][cellIndex] = 2;\n  }\n\n  clearCell(cell) {\n    cell.className = 'field-cell';\n    cell.textContent = '';\n  }\n\n  move(direction) {\n    const isVertical = direction === 'up' || direction === 'down';\n    const step = direction === 'left' || direction === 'up' ? -1 : 1;\n    const start = step === 1 ? 3 : 0;\n    const end = (i) => (step === 1 ? i >= 0 : i < 4);\n\n    let moveDone = false;\n\n    for (let rowIndex = start; end(rowIndex); rowIndex -= step) {\n      for (let cellIndex = start; end(cellIndex); cellIndex -= step) {\n        let n = 0;\n        let row = rowIndex;\n        let col = cellIndex;\n        let nextRow = isVertical ? rowIndex + (n + 1) * step : rowIndex;\n        let nextCol = isVertical ? cellIndex : cellIndex + (n + 1) * step;\n\n        let currentCell = this.currentState[row][col];\n        let nextCell;\n\n        if (currentCell === 0) {\n          continue;\n        }\n\n        if (nextRow >= 0 && nextRow < 4) {\n          nextCell = this.currentState[nextRow][nextCol];\n        }\n\n        while (nextCell === 0 || nextCell === currentCell) {\n          moveDone = true;\n\n          if (nextCell === 0) {\n            this.currentState[nextRow][nextCol] = currentCell;\n            this.currentState[row][col] = 0;\n\n            n++;\n\n            row = isVertical ? rowIndex + n * step : rowIndex;\n            col = isVertical ? cellIndex : cellIndex + n * step;\n            nextRow = isVertical ? rowIndex + (n + 1) * step : rowIndex;\n            nextCol = isVertical ? cellIndex : cellIndex + (n + 1) * step;\n\n            if (nextRow >= 0 && nextRow < 4 && nextCol >= 0 && nextCol < 4) {\n              currentCell = this.currentState[row][col];\n              nextCell = this.currentState[nextRow][nextCol];\n            } else {\n              break;\n            }\n          } else {\n            this.currentState[nextRow][nextCol] = currentCell * 2;\n            this.currentState[row][col] = 0;\n            this.score += currentCell * 2;\n            this.getScore();\n            break;\n          }\n        }\n      }\n    }\n\n    if (moveDone) {\n      this.createNewCell();\n      this.renderHTML();\n      this.getStatus();\n    }\n  }\n\n  moveLeft() {\n    this.move('left');\n  }\n\n  moveRight() {\n    this.move('right');\n  }\n\n  moveUp() {\n    this.move('up');\n  }\n\n  moveDown() {\n    this.move('down');\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    const scoreField = document.querySelector('.game-score');\n\n    scoreField.textContent = this.score;\n\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.currentState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    const emptyField = this.currentState.every((row) => {\n      return row.every((cell) => cell === 0);\n    });\n\n    if (emptyField) {\n      return 'idle';\n    }\n\n    const is2048 = this.currentState.some((row) => {\n      return row.some((cell) => cell === 2048);\n    });\n\n    if (is2048) {\n      document.querySelector('.message-win').classList.remove('hidden');\n\n      return 'win';\n    }\n\n    if (!this.nextMovePossible()) {\n      document.querySelector('.message-lose').classList.remove('hidden');\n\n      return 'lose';\n    }\n\n    return 'playing';\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.createNewCell();\n    this.createNewCell();\n    this.renderHTML();\n    document.querySelector('.message-start').classList.add('hidden');\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    document.querySelector('.message-win').classList.add('hidden');\n    document.querySelector('.message-lose').classList.add('hidden');\n    this.currentState = this.initialState.map((el) => [...el]);\n    this.score = 0;\n    this.getScore();\n    this.createNewCell();\n    this.createNewCell();\n    this.renderHTML();\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$09e991522ca7e64e$var$game","constructor","initialState","currentState","map","el","tbody","document","querySelector","score","nextMovePossible","some","row","rowIndex","cell","cellIndex","upperCell","lowerCell","rightCell","leftCell","zeroValue","sameValue","renderHTML","forEach","cells","tr","children","clearCell","textContent","className","classList","add","createNewCell","every","Math","floor","random","move","direction","isVertical","step","start","end","i","moveDone","nextCell","n","col","nextRow","nextCol","currentCell","getScore","getStatus","moveLeft","moveRight","moveUp","moveDown","scoreField","getState","remove","restart","$09e991522ca7e64e$var$button","addEventListener","contains","e","key"],"version":3,"file":"index.2354620f.js.map"}